version: "3.8"
services:
  nginx:
    image: nginx:latest
    container_name: nginx
    networks:
      - internal-network
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/auth-service.conf:/etc/nginx/conf.d/auth-service.conf
      - ./nginx/train-service.conf:/etc/nginx/conf.d/train-service.conf
      - ./nginx/payment-service.conf:/etc/nginx/conf.d/payment-service.conf
      - ./nginx/notification-service.conf:/etc/nginx/conf.d/notification-service.conf
      - ./logs:/var/log/nginx
    depends_on:
      - train-service
      - auth-service
      - payment-service
      - notification-service
      # - logstash

  auth-service:
    container_name: auth-service
    build: ./auth-service
    image: auth-service:latest
    expose:
      - 8001
    networks:
      - internal-network
    volumes:
      - ./auth-service:/app
    depends_on:
      postgres-auth:
        condition: service_healthy
      # logstash:
      #   condition: service_started
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-auth:5432/auth_db
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5044

  train-service:
    container_name: train-service
    build: ./train-service
    image: train-service:latest
    expose:
      - 8002
    networks:
      - internal-network
    volumes:
      - ./train-service:/app
    depends_on:
      postgres-train:
        condition: service_healthy
      redis-lock:
        condition: service_started
      # - logstash
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-train:5432/train_db
      - REDIS_HOST=redis-lock
      - REDIS_PORT=6379
      - NGINX_HOST=nginx
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5044

  payment-service:
    container_name: payment-service
    build: ./payment-service
    image: payment-service:latest
    expose:
      - 8003
    networks:
      - internal-network
    volumes:
      - ./payment-service:/app
    depends_on:
      postgres-payment:
        condition: service_healthy
      rabbitmq:
        condition: service_started
      # - logstash
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres-payment:5432/payment_db
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - NGINX_HOST=nginx
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5044

  notification-service:
    container_name: notification-service
    build: ./notification-service
    image: notification-service:latest
    expose:
      - 8004
    networks:
      - internal-network
    volumes:
      - ./notification-service:/app
    depends_on:
      rabbitmq:
        condition: service_started
      # - logstash
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - NGINX_HOST=nginx
      - SMTP_SERVER=smtp.mailtrap.io
      - SMTP_PORT=2525
      - SMTP_USERNAME=your_mailtrap_username
      - SMTP_PASSWORD=your_mailtrap_password
      - FROM_EMAIL=noreply@trainbooking.com
      - ENVIRONMENT=development
      - LOGSTASH_HOST=logstash
      - LOGSTASH_PORT=5044

  postgres-auth:
    image: postgres:15
    container_name: postgres-auth
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth_db
    networks:
      - internal-network
    ports:
      - "5433:5432" 
    volumes:
      - ./postgres-auth-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 10s

  postgres-train:
    image: postgres:15
    container_name: postgres-train
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: train_db
    networks:
      - internal-network
    ports:
      - "5434:5432"
    volumes:
      - ./postgres-train-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 10s

  postgres-payment:
    image: postgres:15
    container_name: postgres-payment
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: payment_db
    networks:
      - internal-network
    ports:
      - "5435:5432"
    volumes:
      - ./postgres-payment-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      retries: 5
      start_period: 10s

  redis-lock:
    image: redis:latest
    container_name: redis-lock
    networks:
      - internal-network
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    networks:
      - internal-network
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - ./rabbitmq-data:/var/lib/rabbitmq

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   restart: unless-stopped
  #   networks:
  #     - internal-network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   ports:
  #     - "3000:3000"
  #   volumes:
  #     - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
  #     - grafana-storage:/var/lib/grafana
  #   environment:
  #     - GF_AUTH_ANONYMOUS_ENABLED=true
  #     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
  #   restart: unless-stopped
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - internal-network

  # elasticsearch:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
  #   container_name: elasticsearch
  #   environment:
  #     - discovery.type=single-node
  #     - xpack.security.enabled=false
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #   ports:
  #     - "9200:9200"
  #   volumes:
  #     - elasticsearch-data:/usr/share/elasticsearch/data
  #   restart: unless-stopped
  #   networks:
  #     - internal-network

  # logstash:
  #   image: docker.elastic.co/logstash/logstash:8.12.0
  #   container_name: logstash
  #   volumes:
  #     - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
  #     - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
  #   ports:
  #     - "5044:5044/tcp"   # JSON logs
  #     - "5044:5044/udp"   # JSON logs
  #     - "9600:9600"       # API port
  #   environment:
  #     LS_JAVA_OPTS: "-Xmx256m -Xms256m"
  #   restart: unless-stopped
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - internal-network

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:8.12.0
  #   container_name: kibana
  #   ports:
  #     - "5601:5601"
  #   environment:
  #     - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
  #   restart: unless-stopped
  #   depends_on:
  #     - elasticsearch
  #   networks:
  #     - internal-network

volumes:
  postgres-auth-data:
  postgres-train-data:
  postgres-payment-data:
  redis-data:
  rabbitmq-data:
  # grafana-storage:
  # elasticsearch-data:

networks:
  internal-network:
    driver: bridge